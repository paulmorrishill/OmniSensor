#ifndef _HTML_CONSTANTS_H_
#define _HTML_CONSTANTS_H_

// Auto-generated HTML constants
// Do not edit this file manually - it will be overwritten

// Generated from html/configure.html
const char* const CONFIGURE_HTML = "<!doctype html><meta content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\" name=viewport><title>Device Configuration</title><link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap\" rel=stylesheet><link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=stylesheet><link href=https://unpkg.com/@angular/material@15/prebuilt-themes/indigo-pink.css rel=stylesheet><style>body{color:#333;background-color:#f5f5f5;margin:0;padding:20px;font-family:Roboto,sans-serif}.container{background:#fff;border-radius:8px;max-width:500px;margin:0 auto;padding:24px;box-shadow:0 2px 10px #0000001a}.header{text-align:center;margin-bottom:32px}.header h1{color:#3f51b5;margin:0;font-size:24px;font-weight:400}.form-field{margin-bottom:20px;position:relative}.form-field label{color:#666;margin-bottom:8px;font-size:14px;font-weight:500;display:block}.form-field input,.form-field select{box-sizing:border-box;border:1px solid #ddd;border-radius:4px;width:100%;padding:12px 16px;font-family:Roboto,sans-serif;font-size:16px;transition:border-color .3s}.form-field input:focus,.form-field select:focus{border-color:#3f51b5;outline:none;box-shadow:0 0 0 2px #3f51b533}.form-field input::placeholder{color:#999}.submit-button{color:#fff;cursor:pointer;background-color:#3f51b5;border:none;border-radius:4px;width:100%;margin-bottom:16px;padding:12px 24px;font-size:16px;font-weight:500;transition:background-color .3s}.submit-button:hover{background-color:#303f9f}.submit-button:active{background-color:#283593}.secondary-link{text-align:center;color:#3f51b5;font-weight:500;text-decoration:none;display:block}.secondary-link:hover{text-decoration:underline}.loading{text-align:center;color:#666;font-style:italic}.status-message{border-radius:4px;margin-bottom:16px;padding:12px;display:none}.status-success{color:#2e7d32;background-color:#e8f5e8;border:1px solid #c8e6c9}.status-error{color:#c62828;background-color:#ffebee;border:1px solid #ffcdd2}</style><body><div class=container><div class=header><h1>Device Configuration</h1></div><div class=status-message id=status></div><form id=configForm><div class=form-field><label for=ssid>WiFi Network</label><select id=ssid required><option value>Loading networks...</select></div><div class=form-field><label for=password>WiFi Password</label><input placeholder=\"Enter WiFi password\" id=password type=password></div><div class=form-field><label for=alias>Device Alias</label><input placeholder=\"Enter device name\" id=alias required></div><div class=form-field><label for=server>Server URL</label><input id=server placeholder=http://server:port required></div><div class=form-field><label for=mode>Device Mode</label><select id=mode required><option value=0>Servo<option value=1>Input Switch<option value=2>Thermometer<option value=3>Soil Sensor<option value=4>Relay<option value=5>RGB LED<option value=6>Latching Valve</select></div><button class=submit-button onclick=submitConfig() type=button>Update Configuration</button><a class=secondary-link href=/color>Configure RGB Colors</a></form></div><script>const fields = [\"ssid\", \"alias\", \"server\", \"mode\"];\n        let currentConfig = {};\n        \n        function showStatus(message, isError = false) {\n            const statusEl = document.getElementById(\"status\");\n            statusEl.textContent = message;\n            statusEl.className = `status-message ${isError ? 'status-error' : 'status-success'}`;\n            statusEl.style.display = 'block';\n            \n            setTimeout(() => {\n                statusEl.style.display = 'none';\n            }, 5000);\n        }\n        \n        function configsAreEqual(config1, config2) {\n            return config1.ssid === config2.ssid &&\n                   config1.alias === config2.alias &&\n                   config1.server === config2.server &&\n                   config1.mode === config2.mode;\n        }\n        \n        function submitConfig() {\n            const newConfig = {};\n            const password = document.getElementById(\"password\").value;\n            \n            // Collect form data\n            for (const field of fields) {\n                newConfig[field] = document.getElementById(field).value;\n            }\n            \n            // Validate required fields\n            if (!newConfig.ssid || !newConfig.alias || !newConfig.server) {\n                showStatus(\"Please fill in all required fields\", true);\n                return;\n            }\n            \n            // Check if configuration has actually changed\n            if (configsAreEqual(currentConfig, newConfig) && !password) {\n                showStatus(\"Configuration is already up to date\", false);\n                return;\n            }\n            \n            const xhr = new XMLHttpRequest();\n            xhr.addEventListener(\"load\", function() {\n                if (this.status === 200) {\n                    showStatus(\"Configuration updated successfully! Device will restart...\", false);\n                } else {\n                    showStatus(\"Failed to update configuration\", true);\n                }\n            });\n            \n            xhr.addEventListener(\"error\", function() {\n                showStatus(\"Network error occurred\", true);\n            });\n            \n            xhr.open(\"POST\", \"/configure\");\n            xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n            \n            // Build form data\n            const formData = new URLSearchParams();\n            for (const field of fields) {\n                formData.append(field, newConfig[field]);\n            }\n            \n            // Only include password if it was entered\n            if (password) {\n                formData.append(\"password\", password);\n            }\n            \n            xhr.send(formData.toString());\n        }\n        \n        function loadConfiguration() {\n            const xhr = new XMLHttpRequest();\n            xhr.addEventListener(\"load\", function() {\n                if (this.status !== 200) {\n                    showStatus(\"Failed to load current configuration\", true);\n                    return;\n                }\n                \n                try {\n                    const response = JSON.parse(this.responseText);\n                    const networks = response.networks || [];\n                    \n                    // Populate WiFi networks\n                    const ssidSelect = document.getElementById(\"ssid\");\n                    ssidSelect.innerHTML = \"\";\n                    \n                    if (networks.length === 0) {\n                        const option = document.createElement(\"option\");\n                        option.value = \"\";\n                        option.textContent = \"No networks found\";\n                        ssidSelect.appendChild(option);\n                    } else {\n                        networks.forEach(network => {\n                            const option = document.createElement(\"option\");\n                            option.value = network.ssid;\n                            option.textContent = `${network.ssid} ${network.encryption} (${network.rssi}dBm)`;\n                            ssidSelect.appendChild(option);\n                        });\n                    }\n                    \n                    // Store current config for comparison\n                    currentConfig = {\n                        ssid: response.storedSsid || \"\",\n                        alias: response.alias || \"\",\n                        server: response.server || \"\",\n                        mode: response.mode?.toString() || \"0\"\n                    };\n                    \n                    // Populate form fields with current values\n                    for (const field of fields) {\n                        const element = document.getElementById(field);\n                        const value = field === \"ssid\" ? currentConfig.ssid : currentConfig[field];\n                        if (element && value !== undefined && value !== null) {\n                            element.value = value;\n                        }\n                    }\n                    \n                    // Don't populate password field for security\n                    document.getElementById(\"password\").value = \"\";\n                    \n                } catch (error) {\n                    console.error(\"Error parsing configuration:\", error);\n                    showStatus(\"Error loading configuration\", true);\n                }\n            });\n            \n            xhr.addEventListener(\"error\", function() {\n                showStatus(\"Failed to connect to device\", true);\n            });\n            \n            xhr.open(\"GET\", \"/currentConfig\");\n            xhr.send();\n        }\n        \n        // Load configuration when page loads\n        loadConfiguration();</script>";

// Generated from html/control.html
const char* const CONTROL_HTML = "<!doctype html><meta content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\" name=viewport><style>.form button{width:100px;height:50px;margin:15px}</style><script>function turnOn() {\n            let n = new XMLHttpRequest;\n            n.open(\"POST\", \"/output-on\");\n            n.send();\n        }\n        \n        function turnOff() {\n            let n = new XMLHttpRequest;\n            n.open(\"POST\", \"/output-off\");\n            n.send();\n        }\n        \n        function oneSecOn() {\n            turnOn();\n            setTimeout(() => turnOff(), 1000);\n        }\n        \n        window.turnOn = turnOn;\n        window.turnOff = turnOff;\n        window.oneSecOn = oneSecOn;</script><body><div class=form><button onclick=turnOn()>On</button><button onclick=turnOff()>Off</button><button onclick=oneSecOn()>On 1 sec</button><button id=openValveBtn onclick=openValve() style=display:none>Open Valve</button><button id=closeValveBtn onclick=closeValve() style=display:none>Close Valve</button></div><script>function openValve() {\n            let n = new XMLHttpRequest;\n            n.open(\"POST\", \"/output-on\");\n            n.send();\n        }\n        \n        function closeValve() {\n            let n = new XMLHttpRequest;\n            n.open(\"POST\", \"/output-off\");\n            n.send();\n        }\n        \n        // Check device mode and show appropriate controls\n        function checkDeviceMode() {\n            let xhr = new XMLHttpRequest;\n            xhr.addEventListener(\"load\", function() {\n                try {\n                    let config = JSON.parse(this.responseText);\n                    if (config.mode === 6) { // Latching Valve mode\n                        // Hide standard controls\n                        document.querySelector('button[onclick=\"turnOn()\"]').style.display = 'none';\n                        document.querySelector('button[onclick=\"turnOff()\"]').style.display = 'none';\n                        document.querySelector('button[onclick=\"oneSecOn()\"]').style.display = 'none';\n                        // Show valve controls\n                        document.getElementById('openValveBtn').style.display = 'inline-block';\n                        document.getElementById('closeValveBtn').style.display = 'inline-block';\n                    }\n                } catch (e) {\n                    console.log('Could not parse device config');\n                }\n            });\n            xhr.open(\"GET\", \"/currentConfig\");\n            xhr.send();\n        }\n        \n        // Check mode when page loads\n        window.addEventListener('load', checkDeviceMode);\n        \n        window.openValve = openValve;\n        window.closeValve = closeValve;</script>";

#endif // _HTML_CONSTANTS_H_