#!/usr/bin/env python3
"""
HTML to C++ Header Generator
Converts HTML files to C++ string constants for embedded projects
"""

import os
import sys
import re
import subprocess
from pathlib import Path

def install_minify_html():
    """Install minify-html package if not available"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "minify-html"])
        return True
    except subprocess.CalledProcessError:
        print("Failed to install minify-html.")
        return False

# Try to import minify-html, install if not available
try:
    import minify_html
except ImportError:
    print("minify-html not found. Installing...")
    if install_minify_html():
        # Force reload of modules after installation
        import importlib
        import sys
        if 'minify_html' in sys.modules:
            importlib.reload(sys.modules['minify_html'])
        try:
            import minify_html
            print("minify-html installed successfully!")
        except ImportError:
            print("Failed to import minify-html after installation.")
            print("Try running the script again or manually install with: pip install minify-html")
            sys.exit(1)
    else:
        print("Failed to install minify-html. Exiting.")
        sys.exit(1)

def minify_html_content(html_content):
    """
    Minify HTML using minify-html library with conservative settings
    """
    # Use minify-html with basic settings, disable JS minification to avoid crashes
    return minify_html.minify(
        html_content,
        minify_js=False,  # Disable JavaScript minification to avoid crashes
        minify_css=True   # Keep CSS minification
    )

def escape_string(content):
    """
    Escape string content for C++ string literal
    """
    # Escape backslashes first
    content = content.replace('\\', '\\\\')
    # Escape double quotes
    content = content.replace('"', '\\"')
    # Escape newlines (though we've removed them in minification)
    content = content.replace('\n', '\\n')
    content = content.replace('\r', '\\r')
    
    return content

def html_to_constant_name(filename):
    """
    Convert HTML filename to C++ constant name
    """
    # Remove extension and convert to uppercase
    name = Path(filename).stem.upper()
    # Replace non-alphanumeric characters with underscores
    name = re.sub(r'[^A-Z0-9]', '_', name)
    return f"{name}_HTML"

def generate_header(html_files, output_file):
    """
    Generate C++ header file with HTML constants
    """
    header_content = []
    
    # Header guard
    guard_name = f"_{Path(output_file).stem.upper()}_H_"
    header_content.append(f"#ifndef {guard_name}")
    header_content.append(f"#define {guard_name}")
    header_content.append("")
    header_content.append("// Auto-generated HTML constants")
    header_content.append("// Do not edit this file manually - it will be overwritten")
    header_content.append("")
    
    # Process each HTML file
    for html_file in html_files:
        try:
            with open(html_file, 'r', encoding='utf-8') as f:
                html_content = f.read()
            
            # Minify HTML
            minified = minify_html_content(html_content)
            
            # Escape for C++ string
            escaped = escape_string(minified)
            
            # Generate constant name
            const_name = html_to_constant_name(html_file)
            
            # Add to header
            header_content.append(f"// Generated from {html_file}")
            header_content.append(f"const char* const {const_name} = \"{escaped}\";")
            header_content.append("")
            
            print(f"Processed: {html_file} -> {const_name}")
            
        except Exception as e:
            print(f"Error processing {html_file}: {e}")
            sys.exit(1)
    
    # Close header guard
    header_content.append(f"#endif // {guard_name}")
    
    # Write header file
    try:
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(header_content))
        print(f"Generated: {output_file}")
    except Exception as e:
        print(f"Error writing {output_file}: {e}")
        sys.exit(1)

def main():
    if len(sys.argv) < 3:
        print("Usage: python html_to_header.py <output_header> <html_file1> [html_file2] ...")
        print("Example: python html_to_header.py src/html_constants.h html/control.html html/configure.html")
        sys.exit(1)
    
    output_file = sys.argv[1]
    html_files = sys.argv[2:]
    
    # Verify all HTML files exist
    for html_file in html_files:
        if not os.path.exists(html_file):
            print(f"Error: HTML file not found: {html_file}")
            sys.exit(1)
    
    print(f"Converting {len(html_files)} HTML file(s) to {output_file}")
    generate_header(html_files, output_file)
    print("Conversion completed successfully!")

if __name__ == "__main__":
    main()